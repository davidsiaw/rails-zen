# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: cimg/ruby:3.3.1-node
        environment:
          RAILS_ENV: test
          BUILDKIT_PROGRESS: plain

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install docker compose
          command: |
            curl -SL https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64 -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - setup_remote_docker:
          version: docker24

      - run:
          name: start stack
          command: |
            docker-compose -f .circleci/compose.yml up -d --wait
            docker-compose -f .circleci/compose.yml exec rails bundle exec rails db:create
            docker-compose -f .circleci/compose.yml exec rails bundle exec rails db:schema:load

      # run tests!
      - run:
          name: prepare test container
          command: |
            mkdir -p /tmp/test-results
            docker-compose -f .circleci/compose.yml exec rails mkdir /tmp/test-results
            docker-compose -f .circleci/compose.yml exec rails rails db:test:prepare

      - run:
          name: request to start recording video
          command: |
            docker-compose -f .circleci/compose.yml exec rails curl chromevideo:9494/start
      - run:
          name: run tests
          command: |
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            docker-compose -f .circleci/compose.yml exec rails bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      - run:
          name: extract results
          when: always
          command: |
            docker cp rails:/tmp/test-results/rspec.xml /tmp/test-results/rspec.xml

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          name: request to stop recording video
          when: always
          command: |
            sleep 3 # wait a bit for the video to finish being made
            docker-compose -f .circleci/compose.yml exec rails curl chromevideo:9494/stop
      - run:
          name: download the video
          when: always
          command: |
            docker cp chromevideo:/var/output/out.mp4 /tmp/test-video.mp4
      - store_artifacts:
          when: always
          path: /tmp/test-video.mp4

  build-unit:
    docker:
      # specify the version you desire here
      - image: cimg/ruby:3.3.1-node
        environment:
          RAILS_ENV: test
          BUILDKIT_PROGRESS: plain
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install docker compose
          command: |
            curl -SL https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64 -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - setup_remote_docker:
          version: docker24

      - run:
          name: start stack
          command: |
            docker-compose -f .circleci/compose-unit.yml up -d --wait

      # run tests!
      - run:
          name: prepare test container
          command: |
            mkdir -p /tmp/test-results
            docker-compose -f .circleci/compose-unit.yml exec rails-unit mkdir /tmp/test-results
            docker-compose -f .circleci/compose-unit.yml exec rails-unit rails db:test:prepare
            docker-compose -f .circleci/compose-unit.yml logs rails-unit

      - run:
          name: request to start recording video
          command: |
            docker-compose -f .circleci/compose-unit.yml exec rails-unit curl chromevideo:9494/start

      - run:
          name: wait for container to ready
          command : |
            docker ps -a
            timeout 60 bash -c -- 'while [[ "$(docker-compose -f .circleci/compose-unit.yml exec rails-unit curl -s -o /dev/null -w ''%{http_code}'' http://localhost:3000/api/v1/health)" != "200" ]]; do sleep 1; printf "."; done'

      - run:
          name: display docker log for failed container start
          command: docker-compose -f .circleci/compose-unit.yml logs rails-unit
          when: on_fail

      - run:
          name: run tests
          command: |
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            docker-compose -f .circleci/compose-unit.yml exec rails-unit bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      - run:
          name: extract results
          when: always
          command: |
            docker cp rails-unit:/tmp/test-results/rspec.xml /tmp/test-results/rspec.xml

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          name: request to stop recording video
          when: always
          command: |
            sleep 3 # wait a bit for the video to finish being made
            docker-compose -f .circleci/compose-unit.yml exec rails-unit curl chromevideo:9494/stop
      - run:
          name: download the video
          when: always
          command: |
            docker cp chromevideo:/var/output/out.mp4 /tmp/test-video.mp4
      - store_artifacts:
          when: always
          path: /tmp/test-video.mp4

  brakeman:
    docker:
      - image: cimg/ruby:3.3.1-node
        environment:
          RAILS_ENV: development
          BUNDLE_ONLY: brakeman
    steps:
      - checkout
      - run:
          name: install brakeman
          command: |
            bundle install
            brakeman --version
      - run: brakeman

  bundler-audit:
    docker:
      - image: cimg/ruby:3.3.1-node
        environment:
          RAILS_ENV: development
          BUNDLE_ONLY: bundleraudit
    steps:
      - checkout
      - run:
          name: install bundler-audit
          command: |
            bundle install
            bundler-audit version
      - run: bundler-audit

  rubocop:
    docker:
      - image: cimg/ruby:3.3.1-node
        environment:
          RAILS_ENV: development
          BUNDLE_ONLY: rubocop
    steps:
      - checkout
      - run:
          name: install rubocop
          command: |
            bundle install
      - run: rubocop

  danger:
    docker:
      - image: cimg/ruby:3.3.1-node
        environment:
          RAILS_ENV: development
          BUNDLE_ONLY: danger
    steps:
      - checkout
      - run:
          name: install danger
          command: |
            bundle install
            danger --version
      - run: danger --verbose

workflows:
  version: 2
  build:
    jobs:
      - build
      - build-unit
      - brakeman
      - bundler-audit
      - rubocop:
          filters:
            branches:
              ignore:
                - master
      - danger:
          filters:
            branches:
              ignore:
                - master
